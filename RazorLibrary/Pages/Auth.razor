@inject IAuthenticationService AuthService;
@inject IVeilNavigationManager Navigation;
@inject AuthenticationStateProvider AuthStateProvider;


<div class="content-container">    
    <div class="auth-panel @(_isLoginNow ? "login" : "register")">
        <div class="sub-panel form">
            <div class="inner-wrapper">
                @if (_isLoginNow2)
                {
                    <h2>Sign In</h2>
                    <LoginForm Input="@loginInput" OnLogin="@SubmitHandler" IsSubmitting="@_isSubmitting" />
                }
                else
                {
                    <h2>Create Account</h2>
                    <RegisterForm Input="@registerInput" OnRegister="@SubmitHandler" IsSubmitting="@_isSubmitting" />
                }

                @if (_isSubmitting)
                {
                    <img src="/images/loading.gif" />
                }
                else
                {
                    <div class="error-message">@_errorMessage</div>
                }
            </div>
        </div>

        <div class="sub-panel welcome">
            <div class="inner-wrapper">
                @if (_isLoginNow2)
                {
                    <h2>Hello, Friend!</h2>
                    <p>Enter your personal details and start journey with us</p>
                }
                else
                {
                    <h2>Welcome back!</h2>
                    <p>To keep connected with us please login with your personal info</p>
                }
                <button @onclick="ChangeMethod" class="btn-dark">@(_isLoginNow2 ? "Sign Up" : " Sign In")</button>
            </div>
        </div>

    </div>
</div>

@code {
    private RegisterRequest registerInput = new();
    private LoginRequest loginInput = new();

    private string? _errorMessage;
    private bool _isSubmitting;

    private bool _isLoginNow = true;
    private bool _isLoginNow2 = true;

    private async Task ChangeMethod()
    {
        _isLoginNow = !_isLoginNow;
        await Task.Delay(550);
        _errorMessage = string.Empty;
        _isLoginNow2 = !_isLoginNow2;
    }

    private async Task SubmitHandler()
    {
        try
        {
            _isSubmitting = true;

            //Test awaiting
            await Task.Delay(1000);
            _errorMessage = _isLoginNow ? await AuthService.LoginAsync(loginInput) : await AuthService.RegisterAsync(registerInput);

            if (string.IsNullOrEmpty(_errorMessage))
                await Navigation.NavigateToAsync("/");

            _isSubmitting = false;
        }
        catch(Exception ex)
        {   
            _errorMessage = ex.Message;
            _isSubmitting = false;
        }
    }
}
